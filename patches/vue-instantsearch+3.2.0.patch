diff --git a/node_modules/vue-instantsearch/src/components/Configure.js b/node_modules/vue-instantsearch/src/components/Configure.js
index 8c5321e..adcc292 100644
--- a/node_modules/vue-instantsearch/src/components/Configure.js
+++ b/node_modules/vue-instantsearch/src/components/Configure.js
@@ -1,6 +1,7 @@
 import { createWidgetMixin } from '../mixins/widget';
 import { createSuitMixin } from '../mixins/suit';
 import { connectConfigure } from 'instantsearch.js/es/connectors';
+import * as Vue from 'vue';
 
 export default {
   inheritAttrs: false,
@@ -17,17 +18,22 @@ export default {
     },
   },
   render(createElement) {
-    if (!this.state || !this.$scopedSlots.default) {
+    const slot =
+      'default' in this.$slots
+        ? this.$slots.default
+        : this.$scopedSlots.default;
+
+    if (!this.state || !slot) {
       return null;
     }
 
-    return createElement(
+    return (Vue.h || createElement)(
       'div',
       {
         class: this.suit(),
       },
       [
-        this.$scopedSlots.default({
+        slot({
           refine: this.state.refine,
           searchParameters: this.state.widgetParams.searchParameters,
         }),
diff --git a/node_modules/vue-instantsearch/src/components/Highlighter.vue b/node_modules/vue-instantsearch/src/components/Highlighter.vue
index bee0e49..a518ee5 100644
--- a/node_modules/vue-instantsearch/src/components/Highlighter.vue
+++ b/node_modules/vue-instantsearch/src/components/Highlighter.vue
@@ -4,13 +4,25 @@
       v-for="({ value, isHighlighted }, index) in parsedHighlights"
       :class="[isHighlighted && suit('highlighted')]"
       :key="index"
-      :is="isHighlighted ? highlightedTagName : textNode"
+      :is="isHighlighted ? highlightedTagName : TextNode"
     >{{ value }}</component>
   </span>
 </template>
 
 <script>
 import { parseAlgoliaHit } from '../util/parseAlgoliaHit';
+import * as Vue from 'vue';
+
+const TextNode =
+  Vue.version && Vue.version.split('.')[0] === '3'
+    ? (props, context) => context.slots.default()
+    : {
+        functional: true,
+        render(createElement, context) {
+          const slots = context.slots();
+          return slots.default;
+        },
+      };
 
 export default {
   name: 'AisHighlighter',
@@ -33,15 +45,7 @@ export default {
     postTag: { type: String, required: true },
   },
   data() {
-    return {
-      textNode: {
-        functional: true,
-        render(createElement, context) {
-          const slots = context.slots();
-          return slots.default;
-        },
-      },
-    };
+    return { TextNode };
   },
   computed: {
     parsedHighlights() {
diff --git a/node_modules/vue-instantsearch/src/components/Index.js b/node_modules/vue-instantsearch/src/components/Index.js
index 2c2fa38..4b86826 100644
--- a/node_modules/vue-instantsearch/src/components/Index.js
+++ b/node_modules/vue-instantsearch/src/components/Index.js
@@ -1,6 +1,7 @@
 import { createSuitMixin } from '../mixins/suit';
 import { createWidgetMixin } from '../mixins/widget';
 import indexWidget from 'instantsearch.js/es/widgets/index/index';
+import * as Vue from 'vue';
 
 // wrapped in a dummy function, since indexWidget doesn't render
 const connectIndex = () => indexWidget;
@@ -28,8 +29,14 @@ export default {
       required: false,
     },
   },
-  render(createElement) {
-    return createElement('div', {}, this.$slots.default);
+  render(h) {
+    return (Vue.h || h)(
+      'div',
+      {},
+      typeof this.$slots.default === 'function'
+        ? this.$slots.default()
+        : this.$slots.default
+    );
   },
   computed: {
     widgetParams() {
diff --git a/node_modules/vue-instantsearch/src/components/InstantSearch.js b/node_modules/vue-instantsearch/src/components/InstantSearch.js
index e5d54f0..d9d15eb 100644
--- a/node_modules/vue-instantsearch/src/components/InstantSearch.js
+++ b/node_modules/vue-instantsearch/src/components/InstantSearch.js
@@ -1,6 +1,7 @@
 import instantsearch from 'instantsearch.js/es';
 import { createInstantSearchComponent } from '../util/createInstantSearchComponent';
 import { warn } from '../util/warn';
+import * as Vue from 'vue';
 
 const oldApiWarning = `Vue InstantSearch: You used the prop api-key or app-id.
 These have been replaced by search-client.
@@ -83,8 +84,8 @@ export default createInstantSearchComponent({
       }),
     };
   },
-  render(createElement) {
-    return createElement(
+  render(h) {
+    return (Vue.h || h)(
       'div',
       {
         class: {
@@ -92,7 +93,9 @@ export default createInstantSearchComponent({
           [this.suit('', 'ssr')]: false,
         },
       },
-      this.$slots.default
+      typeof this.$slots.default === 'function'
+        ? this.$slots.default()
+        : this.$slots.default
     );
   },
 });
diff --git a/node_modules/vue-instantsearch/src/components/InstantSearchSsr.js b/node_modules/vue-instantsearch/src/components/InstantSearchSsr.js
index eadcdda..60e4a22 100644
--- a/node_modules/vue-instantsearch/src/components/InstantSearchSsr.js
+++ b/node_modules/vue-instantsearch/src/components/InstantSearchSsr.js
@@ -1,4 +1,5 @@
 import { createInstantSearchComponent } from '../util/createInstantSearchComponent';
+import * as Vue from 'vue';
 
 export default createInstantSearchComponent({
   name: 'AisInstantSearchSsr',
@@ -14,8 +15,8 @@ export default createInstantSearchComponent({
       instantSearchInstance: this.$_ais_ssrInstantSearchInstance,
     };
   },
-  render(createElement) {
-    return createElement(
+  render(h) {
+    return (Vue.h || h)(
       'div',
       {
         class: {
@@ -23,7 +24,9 @@ export default createInstantSearchComponent({
           [this.suit('', 'ssr')]: true,
         },
       },
-      this.$slots.default
+      typeof this.$slots.default === 'function'
+        ? this.$slots.default()
+        : this.$slots.default
     );
   },
 });
diff --git a/node_modules/vue-instantsearch/src/components/RatingMenu.vue b/node_modules/vue-instantsearch/src/components/RatingMenu.vue
index c886bb2..ae625aa 100644
--- a/node_modules/vue-instantsearch/src/components/RatingMenu.vue
+++ b/node_modules/vue-instantsearch/src/components/RatingMenu.vue
@@ -45,7 +45,7 @@
                 width="24"
                 height="24"
                 :class="[suit('starIcon'), suit('starIcon--full')]"
-                :key="n"
+                :key="n + '-full'"
               >
                 <use xlink:href="#ais-RatingMenu-starSymbol" />
               </svg>
@@ -56,7 +56,7 @@
                 aria-hidden="true"
                 width="24"
                 height="24"
-                :key="n"
+                :key="n + '-empty'"
               >
                 <use xlink:href="#ais-RatingMenu-starEmptySymbol" />
               </svg>
diff --git a/node_modules/vue-instantsearch/src/components/SearchInput.vue b/node_modules/vue-instantsearch/src/components/SearchInput.vue
index 1984697..776833c 100644
--- a/node_modules/vue-instantsearch/src/components/SearchInput.vue
+++ b/node_modules/vue-instantsearch/src/components/SearchInput.vue
@@ -20,10 +20,10 @@
       :placeholder="placeholder"
       :autofocus="autofocus"
       :class="suit('input')"
-      :value="value"
+      :value="value || modelValue"
       @focus="$emit('focus', $event)"
       @blur="$emit('blur', $event)"
-      @input="$emit('input', $event.target.value)"
+      @input="$emit('input', $event.target.value);$emit('update:modelValue', $event.target.value)"
       ref="input"
     >
     <button
@@ -53,7 +53,7 @@
       type="reset"
       :title="resetTitle"
       :class="suit('reset')"
-      :hidden="!value || (showLoadingIndicator && shouldShowLoadingIndicator)"
+      :hidden="(!value && !modelValue) || (showLoadingIndicator && shouldShowLoadingIndicator)"
     >
       <slot name="reset-icon">
         <svg
@@ -153,9 +153,14 @@ export default {
     },
     value: {
       type: String,
-      required: true,
+      required: false,
     },
+    modelValue: {
+      type: String,
+      required: false,
+    }
   },
+  emits: ['input', 'update:modelValue', 'blur', 'focus', 'reset'],
   data() {
     return {
       query: '',
@@ -168,6 +173,7 @@ export default {
     },
     onFormReset() {
       this.$emit('input', '');
+      this.$emit('update:modelValue', '');
       this.$emit('reset');
     },
   },
diff --git a/node_modules/vue-instantsearch/src/mixins/panel.js b/node_modules/vue-instantsearch/src/mixins/panel.js
index 40464ea..fe370ff 100644
--- a/node_modules/vue-instantsearch/src/mixins/panel.js
+++ b/node_modules/vue-instantsearch/src/mixins/panel.js
@@ -1,4 +1,4 @@
-import Vue from 'vue';
+import mitt from 'mitt';
 
 export const PANEL_EMITTER_NAMESPACE = 'instantSearchPanelEmitter';
 export const PANEL_CHANGE_EVENT = 'PANEL_CHANGE_EVENT';
@@ -9,9 +9,7 @@ export const createPanelProviderMixin = () => ({
       type: Object,
       required: false,
       default() {
-        return new Vue({
-          name: 'PanelProvider',
-        });
+        return mitt();
       },
     },
   },
@@ -26,12 +24,12 @@ export const createPanelProviderMixin = () => ({
     };
   },
   created() {
-    this.emitter.$on(PANEL_CHANGE_EVENT, value => {
+    this.emitter.on(PANEL_CHANGE_EVENT, value => {
       this.updateCanRefine(value);
     });
   },
   beforeDestroy() {
-    this.emitter.$destroy();
+    this.emitter.all.clear();
   },
   methods: {
     updateCanRefine(value) {
@@ -46,7 +44,7 @@ export const createPanelConsumerMixin = ({ mapStateToCanRefine }) => ({
       from: PANEL_EMITTER_NAMESPACE,
       default() {
         return {
-          $emit: () => {},
+          emit: () => {},
         };
       },
     },
@@ -67,7 +65,7 @@ export const createPanelConsumerMixin = ({ mapStateToCanRefine }) => ({
       const nextCanRefine = mapStateToCanRefine(nextState);
 
       if (!this.hasAlreadyEmitted || previousCanRefine !== nextCanRefine) {
-        this.emitter.$emit(PANEL_CHANGE_EVENT, nextCanRefine);
+        this.emitter.emit(PANEL_CHANGE_EVENT, nextCanRefine);
 
         this.hasAlreadyEmitted = true;
       }
diff --git a/node_modules/vue-instantsearch/src/mixins/widget.js b/node_modules/vue-instantsearch/src/mixins/widget.js
index 65424fe..9705a9b 100644
--- a/node_modules/vue-instantsearch/src/mixins/widget.js
+++ b/node_modules/vue-instantsearch/src/mixins/widget.js
@@ -27,7 +27,7 @@ export const createWidgetMixin = ({ connector } = {}) => ({
     if (typeof connector === 'function') {
       this.factory = connector(this.updateState, () => {});
       this.widget = this.factory(this.widgetParams);
-      this.getParentIndex().addWidgets([this.widget]);
+      this.getParentIndex()().addWidgets([this.widget]);
 
       if (
         this.instantSearchInstance.__initialSearchResults &&
diff --git a/node_modules/vue-instantsearch/src/util/createInstantSearchComponent.js b/node_modules/vue-instantsearch/src/util/createInstantSearchComponent.js
index 3501d6c..45af2ce 100644
--- a/node_modules/vue-instantsearch/src/util/createInstantSearchComponent.js
+++ b/node_modules/vue-instantsearch/src/util/createInstantSearchComponent.js
@@ -1,7 +1,7 @@
 import { createSuitMixin } from '../mixins/suit';
 import { version } from '../../package.json'; // rollup does pick only what needed from json
 import { _objectSpread } from './polyfills';
-import Vue from 'vue';
+import { version as VueVersion } from 'vue';
 
 export const createInstantSearchComponent = component =>
   _objectSpread(
@@ -38,7 +38,7 @@ export const createInstantSearchComponent = component =>
       created() {
         const searchClient = this.instantSearchInstance.client;
         if (typeof searchClient.addAlgoliaAgent === 'function') {
-          searchClient.addAlgoliaAgent(`Vue (${Vue.version})`);
+          searchClient.addAlgoliaAgent(`Vue (${VueVersion})`);
           searchClient.addAlgoliaAgent(`Vue InstantSearch (${version})`);
         }
       },
